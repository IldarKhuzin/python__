# 3. Создайте собственный класс-исключение, который должен проверять содержимое
# списка на наличие только чисел. Проверить работу исключения на реальном примере.
# Запрашивать у пользователя данные и заполнять список необходимо только числами.
# Класс-исключение должен контролировать типы данных элементов списка.
# Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь
# сам не остановит работу скрипта, введя, например, команду «stop». При этом скрипт завершается,
# сформированный список с числами выводится на экран.
# Подсказка: для этого задания примем, что пользователь может вводить только числа и строки.
# Во время ввода пользователем очередного элемента необходимо реализовать проверку типа элемента.
# Вносить его в список, только если введено число. Класс-исключение должен не позволить
# пользователю ввести текст (не число) и отобразить соответствующее сообщение. При этом работа
# скрипта не должна завершаться.

class IsDigit:

    def __init__(self):
        self.my_list = []

    def my_input(self):
        decision = True
        while decision:
            try:
                my_element = int(input('введите число '))
                self.my_list.append(my_element)
                print(self.my_list)
            except:
                print(f'вы ввели не число')
                user_decision = input('хотите продолжить? (y/n)')
                if user_decision == 'y' or user_decision == 'Y':
                    decision = True
                else:
                    print(self.my_list)
                    print('спасибо за внимание')
                    decision = False

a = IsDigit()
a.my_input()
